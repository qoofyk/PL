First trace: assume that all elements in second list are in first list

| ?- [delete].
[Compiling ./delete]
[delete compiled, cpu time used: 0.0060 seconds]
[delete loaded]

yes
| ?- delete([1,2,3,4,5,7],[2,3,5],Result).

Result = [1,4,7]

yes
| ?- trace.

yes
[trace]
| ?- delete([1,2,3,4,5,7], [2,3,5], Result).
   (0) Call: delete([1,2,3,4,5,7],[2,3,5],_h250) ? 
   (1) Call: member(1,[2,3,5]) ? 
   (2) Call: member(1,[3,5]) ? 
   (3) Call: member(1,[5]) ? 
   (4) Call: member(1,[]) ? 
   (4) Fail: member(1,[]) ? 
   (3) Fail: member(1,[5]) ? 
   (2) Fail: member(1,[3,5]) ? 
   (1) Fail: member(1,[2,3,5]) ? 
   (5) Call: delete([2,3,4,5,7],[2,3,5],_h365) ? 
   (6) Call: member(2,[2,3,5]) ? 
   (6) Exit: member(2,[2,3,5]) ? 
   (7) Call: delete([3,4,5,7],[2,3,5],_h365) ? 
   (8) Call: member(3,[2,3,5]) ? 
   (9) Call: member(3,[3,5]) ? 
   (9) Exit: member(3,[3,5]) ? 
   (8) Exit: member(3,[2,3,5]) ? 
   (10) Call: delete([4,5,7],[2,3,5],_h365) ? 
   (11) Call: member(4,[2,3,5]) ? 
   (12) Call: member(4,[3,5]) ? 
   (13) Call: member(4,[5]) ? 
   (14) Call: member(4,[]) ? 
   (14) Fail: member(4,[]) ? 
   (13) Fail: member(4,[5]) ? 
   (12) Fail: member(4,[3,5]) ? 
   (11) Fail: member(4,[2,3,5]) ? 
   (15) Call: delete([5,7],[2,3,5],_h457) ? 
   (16) Call: member(5,[2,3,5]) ? 
   (17) Call: member(5,[3,5]) ? 
   (18) Call: member(5,[5]) ? 
   (18) Exit: member(5,[5]) ? 
   (17) Exit: member(5,[3,5]) ? 
   (16) Exit: member(5,[2,3,5]) ? 
   (19) Call: delete([7],[2,3,5],_h457) ? 
   (20) Call: member(7,[2,3,5]) ? 
   (21) Call: member(7,[3,5]) ? 
   (22) Call: member(7,[5]) ? 
   (23) Call: member(7,[]) ? 
   (23) Fail: member(7,[]) ? 
   (22) Fail: member(7,[5]) ? 
   (21) Fail: member(7,[3,5]) ? 
   (20) Fail: member(7,[2,3,5]) ? 
   (24) Call: delete([],[2,3,5],_h537) ? 
   (24) Exit: delete([],[2,3,5],[]) ? 
   (19) Exit: delete([7],[2,3,5],[7]) ? 
   (15) Exit: delete([5,7],[2,3,5],[7]) ? 
   (10) Exit: delete([4,5,7],[2,3,5],[4,7]) ? 
   (7) Exit: delete([3,4,5,7],[2,3,5],[4,7]) ? 
   (5) Exit: delete([2,3,4,5,7],[2,3,5],[4,7]) ? 
   (0) Exit: delete([1,2,3,4,5,7],[2,3,5],[1,4,7]) ? 

Result = [1,4,7]


Second Trace: elements in second list doesn't necessarily in the first list
| ?- [delete].
[delete loaded]

yes
| ?- delete([1,2,3,4,5],[2,5,8,9],Result).

Result = [1,3,4]

yes
| ?- trace.

yes
[trace]
| ?- delete([1,2,3,4,5],[2,5,8,9],Result).
   (0) Call: delete([1,2,3,4,5],[2,5,8,9],_h250) ? 
   (1) Call: member(1,[2,5,8,9]) ? 
   (2) Call: member(1,[5,8,9]) ? 
   (3) Call: member(1,[8,9]) ? 
   (4) Call: member(1,[9]) ? 
   (5) Call: member(1,[]) ? 
   (5) Fail: member(1,[]) ? 
   (4) Fail: member(1,[9]) ? 
   (3) Fail: member(1,[8,9]) ? 
   (2) Fail: member(1,[5,8,9]) ? 
   (1) Fail: member(1,[2,5,8,9]) ? 
   (6) Call: delete([2,3,4,5],[2,5,8,9],_h361) ? 
   (7) Call: member(2,[2,5,8,9]) ? 
   (7) Exit: member(2,[2,5,8,9]) ? 
   (8) Call: delete([3,4,5],[2,5,8,9],_h361) ? 
   (9) Call: member(3,[2,5,8,9]) ? 
   (10) Call: member(3,[5,8,9]) ? 
   (11) Call: member(3,[8,9]) ? 
   (12) Call: member(3,[9]) ? 
   (13) Call: member(3,[]) ? 
   (13) Fail: member(3,[]) ? 
   (12) Fail: member(3,[9]) ? 
   (11) Fail: member(3,[8,9]) ? 
   (10) Fail: member(3,[5,8,9]) ? 
   (9) Fail: member(3,[2,5,8,9]) ? 
   (14) Call: delete([4,5],[2,5,8,9],_h405) ? 
   (15) Call: member(4,[2,5,8,9]) ? 
   (16) Call: member(4,[5,8,9]) ? 
   (17) Call: member(4,[8,9]) ? 
   (18) Call: member(4,[9]) ? 
   (19) Call: member(4,[]) ? 
   (19) Fail: member(4,[]) ? 
   (18) Fail: member(4,[9]) ? 
   (17) Fail: member(4,[8,9]) ? 
   (16) Fail: member(4,[5,8,9]) ? 
   (15) Fail: member(4,[2,5,8,9]) ? 
   (20) Call: delete([5],[2,5,8,9],_h419) ? 
   (21) Call: member(5,[2,5,8,9]) ? 
   (22) Call: member(5,[5,8,9]) ? 
   (22) Exit: member(5,[5,8,9]) ? 
   (21) Exit: member(5,[2,5,8,9]) ? 
   (23) Call: delete([],[2,5,8,9],_h419) ? 
   (23) Exit: delete([],[2,5,8,9],[]) ? 
   (20) Exit: delete([5],[2,5,8,9],[]) ? 
   (14) Exit: delete([4,5],[2,5,8,9],[4]) ? 
   (8) Exit: delete([3,4,5],[2,5,8,9],[3,4]) ? 
   (6) Exit: delete([2,3,4,5],[2,5,8,9],[3,4]) ? 
   (0) Exit: delete([1,2,3,4,5],[2,5,8,9],[1,3,4]) ? 

Result = [1,3,4]
